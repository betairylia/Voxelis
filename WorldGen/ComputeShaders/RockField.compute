#ifndef ROCKFIELD
#define ROCKFIELD

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "includes/noise.cginc"
#include "includes/utils.cginc"
#include "includes/structures.cginc"

StructuredBuffer<int> chkBuf;
RWStructuredBuffer<Block> blkBuf;
AppendStructuredBuffer<StructureSeedDescriptor> structureBuf;

// Eco1 = Dirt ground - dead trees should grow on top.
// Eco2 = Sky bridge - hanged mushrooms should grow under bottom.
float EvalGeometry(float3 pos, out float height, inout Block blk, out float eco1, out float eco2)
{
    //float4 color = float4(0, 0, 0, 1); // ground color
    float4 color = lerp(float4(0.1, 0.1, 0.1, 1), float4(0.4, 0.4, 0.4, 1), clamp(fbm_4(pos / 3.0 + float3(1.2345, -6.1237, 0.1246)) * 1 + 0.5, 0, 1)); // rocky color

    height = fbm_9(pos.xz / 100.0) * 0.5 + 0.5; // 0 ~ 1
    
    // Scale
    height = (height * 45.0 - 15.0);
    //height = (height * 150.0 - 50.0);

    // Distance
    float sdf = smin(fbm_4(pos / 10., 0.4) + 0.15, 0, 0.05, color, float4(0.729, 0.518, 0.282, 1), color, eco1);
    sdf += (pos.y - height) * 0.08; // More ground

    /////////////////////////////////////////////////////////
    // SKY BRIDGES
    /////////////////////////////////////////////////////////

    // Wrap for sky bridge
    float3 np = pos; // Identity

    // Bridge body
    float cav = dot(cos(np * 3.14159265 / 80.), sin(np.yzx * 3.14159265 / 80.));

    // This punishes the sky bridge on higher places & low density area of fbm_4 (noise)
    float correlation = (
        2.5 +                                   // base punishment
        ((np.y - height) / 45.)                // punishment w.r.t. height (from ground)
        ) * (fbm_4(np.xz / 100.0) * 0.5 + 0.5);    // noisy multiplier (on higher values of fbm_4, nearly no punishments (*=0))
    
    cav = cav + correlation;                        // Apply the punishment by pushing the surface away (increase distance)
    cav += fbm_4(np / 30.0, 0.45);                       // Add some salt

    sdf = smin(sdf, cav, 1.0, color, float4(1, 1, 1, 1), color, eco2); // Soft union of ground and bridge
    //sdf = smin(sdf, cav, 1.0, color, float4(0.420, 0.290, 0.169, 1), color, eco2); // Soft union of ground and bridge - dirt variant
    eco1 = max(0, eco1 - eco2);
    //sdf = cav;

    /////////////////////////////////////////////////////////
    // SKY BRIDGES
    /////////////////////////////////////////////////////////

    if (sdf < 0)
    {
        // Ground color
        blk = ToID(color);
    }

    return sdf;
}

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	int chkID = id.x / 32;
	int dest = chkID * 32768 + (id.x % 32) * 1024 + id.y * 32 + id.z;

	float3 pos = float3(int(id.x % 32) + chkBuf[chkID * 3 + 0], int(id.y) + chkBuf[chkID * 3 + 1], int(id.z) + chkBuf[chkID * 3 + 2]);
    float3 pos_less = pos / 12.8336f;
    int3 i_worldPos = int3(pos.x, pos.y, pos.z);

    float height;
    Block blk;
    blk.data = 0x0;

    float eco1, eco2;
    float sdf = EvalGeometry(pos, height, blk, eco1, eco2);

    blkBuf[dest] = blk;
    float ecoRNG = hash13(pos_less);
    //float ecoRNG = 1.0f;

    // Decide which EcoSystem we should populate
    if (sdf <= 0)
    {
        float _f;
        Block _u;
        float up = EvalGeometry(pos + float3(0, 1, 0), _f, _u, _f, _f); // somehow like the normal of the surface
        float down = EvalGeometry(pos - float3(0, 2, 0), _f, _u, _f, _f);
        //float down = -up; // Save time

        // Eco1: Dirt; we have only if we are up enough and "eco1" enough
        if (up > 0.015 && eco1 > 0.8) // Last hash = 5% chance to populate a tree
        {
            // Test
            if (ecoRNG > 0.986f && ecoRNG < 0.99f)
            {
                //blkBuf[dest] = ToID(float4(0.961, 0.510, 0.125, 1)); //orange

                StructureSeedDescriptor desc;
                desc.structureType = -1; // Matryoshka test
                desc.worldPos = i_worldPos;
                structureBuf.Append(desc);
            }

            // Bush
            if (ecoRNG > 0.99f && ecoRNG < 0.999f)
            {
                //blkBuf[dest] = ToID(float4(0.961, 0.510, 0.125, 1)); //orange

                StructureSeedDescriptor desc;
                desc.structureType = SU_SPHERE;
                desc.worldPos = i_worldPos;
                structureBuf.Append(desc);
            }

            // Tree
            if (ecoRNG > 0.999f)
            {
                //blkBuf[dest] = ToID(float4(1, 0, 0, 1)); //red

                StructureSeedDescriptor desc;
                desc.structureType = SU_TREE;
                desc.worldPos = i_worldPos;
                structureBuf.Append(desc);
            }
        }

        // Eco2: Bridge: we have only if we are down enough (at bottom) and "eco2" enough
        //if (down > 0.085 && eco2 > 0.8)
        if (down > 0.076 && eco2 > 0.8) // more mushrooms
        {
            if (ecoRNG > 0.98f)
            {
                //blkBuf[dest] = ToID(float4(0.341, 0.380, 0.157, 1)); //moss green
                blkBuf[dest] = ToID(float4(0.0, 0.718, 0.808, 0.5)); //light blue - .a < 0.9 => emissive (for test purpose)

                StructureSeedDescriptor desc;
                desc.structureType = SU_HANG_MUSHROOM;
                desc.worldPos = i_worldPos;
                structureBuf.Append(desc);
            }
        }

        // Just add some "black snow" to Eco2
        if (up > 0.0 && eco2 > 0.8)
        {
            blkBuf[dest] = ToID(float4(0.2, 0.2, 0.2, 1)); // dark grey
            //blkBuf[dest] = ToID(float4(0.569, 0.729, 0.345, 1)); // grass
        }
    }
    
    /*if (i_worldPos.x == 0 && i_worldPos.y == 0 && i_worldPos.z == 0)
    {
        StructureSeedDescriptor desc;
        desc.structureType = SU_HANG_MUSHROOM;
        desc.worldPos = i_worldPos;
        structureBuf.Append(desc);
    }*/
}

#endif //ROCKFIELD