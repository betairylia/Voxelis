#ifndef MOONLIGHTFOREST
#define MOONLIGHTFOREST

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "includes/noise.cginc"
#include "includes/utils.cginc"
#include "includes/structures.cginc"

StructuredBuffer<int> chkBuf;
RWStructuredBuffer<Block> blkBuf;
AppendStructuredBuffer<StructureSeedDescriptor> structureBuf;

Texture2D<float4> Sketch;
SamplerState samplerSketch;

static const float erosionStrength = 20.0f;
static const float sketchSize = 1024.0f;
static const float sketchScale = 4.0f;

static const float4 bDirt = float4(0.729, 0.518, 0.282, 1);
//static const float4 bDirt = float4(0.529, 0.361, 0.267, 1);
static const float4 bRock = float4(0.467, 0.471, 0.482, 1);
static const float4 bSand = float4(1.000, 0.910, 0.686, 1);
//static const float4 bWater = float4(0, 0.718, 0.808, 1);

// HSV
//static const float4 bDirt = float4(0.0667, 0.60, 0.36, 1);
//static const float4 bRock = float4(0.0667, 0.00, 0.44, 1);
//static const float4 bSand = float4(0.1361, 0.63, 0.66, 1);

// https://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl
// All components are in the range [0...1], including hue.
float3 rgb2hsv(float3 c)
{
    float4 K = float4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    float4 p = lerp(float4(c.bg, K.wz), float4(c.gb, K.xy), step(c.b, c.g));
    float4 q = lerp(float4(p.xyw, c.r), float4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return float3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

// All components are in the range [0...1], including hue.
float3 hsv2rgb(float3 c)
{
    float4 K = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    float3 p = abs(frac(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * lerp(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

float EvalGeometry(float3 pos, out float height, inout Block blk)
{
    /////////////////////// Height map & Apply sketch
    //float4 color = float4(0, 0, 0, 1); // ground color
    //float4 color = lerp(float4(0.427, 0.514, 0.275, 1), float4(0.427, 0.373, 0.102, 1), clamp(fbm_4(pos / 1.8 + float3(1.2345, -6.1237, 0.1246)) * 1 + 0.5, 0, 1)); // ground color, grassy

    //height = fbm_9(pos.xz / 100.0) * 0.5 + 0.5; // 0 ~ 1
    //height = sketch[float2(0.5, 0.8)].r;
    float4 sketch = Sketch.SampleLevel(samplerSketch, (pos.xz / (sketchSize * sketchScale)) + 0.5f, 0);
    height = sketch.r;
    float erosion = sketch.g;
    
    float4 color = lerp(bDirt, bRock, saturate(-erosion * 18.0));
    color = lerp(color, bSand, saturate(erosion * 6.0));

    //color.rgb = hsv2rgb(color.rgb);

    // Scale
    height = (height * 256.0);

    // Distance
    float sdf = pos.y - height;

    if (sdf < 0)
    {
        // Ground color
        blk = ToID(color);
    }

    return sdf;
}

[numthreads(8, 8, 8)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    int chkID = id.x / 32;
    int dest = chkID * 32768 + (id.x % 32) * 1024 + id.y * 32 + id.z;

    float3 pos = float3(int(id.x % 32) + chkBuf[chkID * 3 + 0], int(id.y) + chkBuf[chkID * 3 + 1], int(id.z) + chkBuf[chkID * 3 + 2]);
    int3 i_worldPos = int3(pos.x, pos.y, pos.z);

    float height;
    Block blk;
    blk.data = 0x0;

    float sdf = EvalGeometry(pos, height, blk);

    blkBuf[dest] = blk;
}

#endif //MOONLIGHTFOREST